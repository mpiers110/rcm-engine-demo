
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  image             String?
  accounts          Account[]
  sessions          Session[]
  password        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  claims          Claim[]
  ruleSets      RuleSet[]  // User can have multiple rule sets
}

model Claim {
  id                 String      @id @default(cuid())
  claimId  String     @unique
  patientId    String     @map("patient_id")
  memberId     String     @map("member_id")
  facilityId   String     @map("facility_id")
  nationalId   String     @map("national_id")
  uniqueId     String
  serviceCode  String     @map("service_code")
  diagnosisCodes String[] @map("diagnosis_codes")
  paidAmount   Float      @map("paid_amount")
  encounterType String    @map("encounter_type")
  claimDate    DateTime   @map("claim_date")
  status       ClaimStatus @default(PENDING)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  ownerId      String     @map("owner_id")
  serviceDate       DateTime
  approvalNumber    String?
  errorType         String
  errorExplanation  String?
  recommendedAction String?
  rawErrors         String[]
  // Relations
  user User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Validation results (stored as JSON)
  validationResult Json?

  @@map("claims")
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_APPROVAL
}

model RuleSet {
  id        String   @id @default(cuid())
  title     String
  framing   String?
  ownerId   String
  type      RuleType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // Relations
  user          User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Technical Rules
  technicalRule   TechnicalRule?
  // Medical Rules
  medicalRule     MedicalRule?

  @@map("rule_sets")
}

enum RuleType {
  TECHNICAL
  MEDICAL
}

// Technical Rules
model TechnicalRule {
  id        String   @id @default(cuid())
  ruleSetId String   @unique
  ruleSet   RuleSet  @relation(fields: [ruleSetId], references: [id], onDelete: Cascade)

  // Services requiring approval
  serviceApprovals ServiceApproval[]

  // Diagnosis codes requiring approval
  diagnosisApprovals DiagnosisApproval[]

  // Paid amount threshold
  paidAmountThreshold PaidAmountThreshold?

  // ID formatting rules
  idFormattingRules IdFormattingRules?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("technical_rules")
}

model ServiceApproval {
  id              String   @id @default(cuid())
  technicalRuleId String
  technicalRule   TechnicalRule @relation(fields: [technicalRuleId], references: [id], onDelete: Cascade)
  
  serviceID         String
  description       String
  approvalRequired  Boolean

  createdAt DateTime @default(now())
  
  @@map("service_approvals")
}

model DiagnosisApproval {
  id              String   @id @default(cuid())
  technicalRuleId String
  technicalRule   TechnicalRule @relation(fields: [technicalRuleId], references: [id], onDelete: Cascade)
  
  code             String
  diagnosis        String
  approvalRequired Boolean

  createdAt DateTime @default(now())
  
  @@map("diagnosis_approvals")
}

model PaidAmountThreshold {
  id              String   @id @default(cuid())
  technicalRuleId String   @unique
  technicalRule   TechnicalRule @relation(fields: [technicalRuleId], references: [id], onDelete: Cascade)
  
  threshold   Float
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("paid_amount_thresholds")
}

model IdFormattingRules {
  id              String   @id @default(cuid())
  technicalRuleId String   @unique
  technicalRule   TechnicalRule @relation(fields: [technicalRuleId], references: [id], onDelete: Cascade)
  
  idFormat          String
  uniqueIdStructure String
  requirements      String[] // Stored as JSON array

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("id_formatting_rules")
}

// Medical Rules
model MedicalRule {
  id        String   @id @default(cuid())
  ruleSetId String   @unique
  ruleSet   RuleSet  @relation(fields: [ruleSetId], references: [id], onDelete: Cascade)

  // Encounter types
  encounterTypes EncounterType[]

  // Facility types and their allowed services
  facilityTypes FacilityType[]

  // Facility registry
  facilityRegistry FacilityRegistry[]

  // Diagnosis requirements for services
  diagnosisRequirements DiagnosisRequirement[]

  // Mutually exclusive diagnoses
  mutuallyExclusiveDiagnoses MutuallyExclusiveDiagnosis[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medical_rules")
}

model EncounterType {
  id           String   @id @default(cuid())
  medicalRuleId String
  medicalRule   MedicalRule @relation(fields: [medicalRuleId], references: [id], onDelete: Cascade)
  
  code        String
  description String

  createdAt DateTime @default(now())
  
  @@map("encounter_types")
}

model FacilityType {
  id           String   @id @default(cuid())
  medicalRuleId String
  medicalRule   MedicalRule @relation(fields: [medicalRuleId], references: [id], onDelete: Cascade)
  
  facilityType    String
  allowedServices String[] // Stored as JSON array of service IDs

  createdAt DateTime @default(now())
  
  @@map("facility_types")
}

model FacilityRegistry {
  id           String   @id @default(cuid())
  medicalRuleId String
  medicalRule   MedicalRule @relation(fields: [medicalRuleId], references: [id], onDelete: Cascade)
  
  facilityId String
  type       String

  createdAt DateTime @default(now())
  
  @@unique([medicalRuleId, facilityId])
  @@map("facility_registry")
}

model DiagnosisRequirement {
  id           String   @id @default(cuid())
  medicalRuleId String
  medicalRule   MedicalRule @relation(fields: [medicalRuleId], references: [id], onDelete: Cascade)
  
  diagnosisCode String
  diagnosisName String
  serviceID     String
  serviceName   String

  createdAt DateTime @default(now())
  
  @@map("diagnosis_requirements")
}

model MutuallyExclusiveDiagnosis {
  id           String   @id @default(cuid())
  medicalRuleId String
  medicalRule   MedicalRule @relation(fields: [medicalRuleId], references: [id], onDelete: Cascade)
  
  diagnosis1Code String
  diagnosis1Name String
  diagnosis2Code String
  diagnosis2Name String

  createdAt DateTime @default(now())
  
  @@map("mutually_exclusive_diagnoses")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  timestamp DateTime @default(now())
  details   String
  userId    String?
}
    